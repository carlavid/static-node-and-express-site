{
    "projects": [
        {
            "id": 0,
            "project_name": "Random Quote Generator",
            "description": "An app that effortlessly presents you with a curated Disney quote at random. You have the choice to either click the 'Show another quote' button for immediate access to a new quote, or simply relax as the page automatically refreshes itself. A built-in timer ensures a fresh quote graces your screen every 10 seconds, while the background color transitions to a new, random hue with each quote's appearance.",
            "technologies": ["HTML", "CSS", "JavaScript"],
            "live_link": "https://carlavid.github.io/random-quote-generator/",
            "github_link": "https://github.com/carlavid/random-quote-generator",
            "image_urls": ["/static/images/quote-generator-1.jpg", "/static/images/quote-generator-2.jpg", "/static/images/quote-generator-3.jpg"]
        },
        {
            "id": 1,
            "project_name": "Data Pagination and Filtering",
            "description": "With a dataset of 42 students, I used pagination to create an interactive 'paging' system, allowing users   to effortlessly explore and view student information across multiple pages. I also incorporated a search feature, enabling users to seamlessly filter through the student data.",
            "technologies": ["HTML", "CSS", "JavaScript"],
            "live_link": "https://carlavid.github.io/data-pagination-and-filtering/",
            "github_link": "https://github.com/carlavid/data-pagination-and-filtering",
            "image_urls": ["/static/images/data-pagination-1.jpg", "/static/images/data-pagination-2.jpg", "/static/images/data-pagination-3.jpg"]
        },
        {
            "id": 2,
            "project_name": "Interactive Form",
            "description": "An app that leverages JavaScript to elevate the interactivity of a registration form designed for a fictional Full Stack conference. I enriched the user experience by introducing my own JavaScript code, instilling the form with custom and context-aware functionality. This includes real-time input validation, insightful error messaging for invalid entries, and the prevention of conflicting activity registrations, all aimed at ensuring a smoother and more user-friendly registration process.",
            "technologies": ["HTML", "CSS", "JavaScript"],
            "live_link": "https://carlavid.github.io/interactive-form/",
            "github_link": "https://github.com/carlavid/interactive-form",
            "image_urls": ["/static/images/interactive-form-1.jpg", "/static/images/interactive-form-2.jpg", "/static/images/interactive-form-3.jpg"]
        },
        {
            "id": 3,
            "project_name": "OOP Game Show App",
            "description": "In this project, I used JavaScript and Object-Oriented Programming to craft a browser-based word guess game. Players aim to decipher a hidden phrase by clicking on either physical or on-screen keyboard keys. After each letter selection, the program cross-references it with the secret phrase. \n\nWhen a match is found, the game board reveals the letter's position. Players continue selecting letters until they either successfully guess the entire phrase and emerge victorious or exceed five incorrect attempts, leading to defeat. If a player manages to solve the phrase before 5 guesses, a winning screen will appear. If they make five incorrect attempts, a losing screen will appear. Importantly, a player can only guess a letter once, and once guessed, it becomes inactive on the on-screen keyboard. ",
            "technologies": ["HTML", "CSS", "JavaScript"],
            "live_link": "https://carlavid.github.io/oop-game/",
            "github_link": "https://github.com/carlavid/oop-game",
            "image_urls": ["/static/images/phrase-hunter-1.jpg", "/static/images/phrase-hunter-2.jpg", "/static/images/phrase-hunter-3.jpg"]
        },
        {
            "id": 4,
            "project_name": "Public API Requests",
            "description": "In this project, I developed an application for a fictional company, 'Awesome Startup', a distributed company known for its widespread remote workforce. I used the Random User Generator API (https://randomuser.me/) to grab information for 12 random 'employees', and used that data to build a prototype for an Awesome Startup employee directory. \n\nI requested a JSON object from the API and parsed the data so that 12 employees are listed in an organized grid format, showcasing each employee's thumbnail image, full name, email, and location. Clicking on an employee's image or name opens a modal window, unveiling further details such as the employee's birthday and address. Additionally, I implemented a feature that enables users to seamlessly toggle between employee modal windows and a search feature for easy employee lookup.",
            "technologies": ["HTML", "CSS", "JavaScript"],
            "live_link": "https://carlavid.github.io/public-api-requests/",
            "github_link": "https://github.com/carlavid/public-api-requests",
            "image_urls": ["/static/images/employee-directory-1.jpg", "/static/images/employee-directory-2.jpg", "/static/images/employee-directory-3.jpg"]
        },
        {
            "id": 5,
            "project_name": "React Gallery App",
            "description": "In this project, I used the React library to create an image gallery as a single page application. The user can either enter an image search term or select from the three default image categories. The app fetches image data from Flickr and displays the images on the webpage.",
            "technologies": ["JavaScript", "Node.js", "React"],
            "live_link": "https://github.com/carlavid/react-gallery-app",
            "github_link": "https://github.com/carlavid/react-gallery-app",
            "image_urls": ["/static/images/gallery-app-1.jpg", "/static/images/gallery-app-2.jpg", "/static/images/gallery-app-3.jpg"]
        },
        {
            "id": 6,
            "project_name": "SQL Library Manager",
            "description": "In this project, I was tasked with creating an application for a fictional library to help them manage their collection of books. Given HTML designs and an existing SQLite database I implemented a dynamic website using JavaScript, Node.js, Express, Pug, SQLite and the SQL ORM Sequelize. I built a web application that includes pages to: list, add, update, and delete books in the SQLite database. The database contained validation to ensure the data provided by the user is consistent and useful.",
            "technologies": ["JavaScript", "Node.js", "Express", "Pug", "SQLite", "Sequelize"],
            "live_link": "https://github.com/carlavid/sql-library-manager",
            "github_link": "https://github.com/carlavid/sql-library-manager",
            "image_urls": ["/static/images/sql-library-manager-1.jpg", "/static/images/sql-library-manager-2.jpg", "/static/images/sql-library-manager-3.jpg"]
        },
        {
            "id": 7,
            "project_name": "Course Catalog: React and REST API",
            "description": "For this project, I created a course catalog with administration capabilities using React, Express, and Sequelize. First, I wrote a REST API to provide a way to administer a school database which contains information about users and courses. The server and database consist of several fundamental features including: \n\n - A data relationship between user and course tables \n - Server-side and database validation, to ensure data consistency and usefulness \n - A handrolled auth stack to prevent unauthorized modifications of the data \n - Create, retrieve, update, and delete operations exposed via the API \n\nOnce the server-side component was completed, I implemented a React-based frontend for it. This frontend consisted of several views including ones for sign up, sign in, viewing all courses, course creation, and course update/deletion. While authorization to perform certain operations (like updates and deletions) is guaranteed by the server-side, the UI helps prevent these requests by adjusting the UI based on whether the user is the owner of a particular course.",
            "technologies": ["JavaScript", "JSX", "Node.js", "REST APIs", "Express", "Sequelize", "REACT", "REACT Router"],
            "live_link": "https://github.com/carlavid/full-stack-app",
            "github_link": "https://github.com/carlavid/full-stack-app",
            "image_urls": [
                "/static/images/full-stack-app-1.jpg",
                "/static/images/full-stack-app-2.jpg",
                "/static/images/full-stack-app-3.jpg",
                "/static/images/full-stack-app-4.jpg",
                "/static/images/full-stack-app-5.jpg",
                "/static/images/full-stack-app-6.jpg"
            ]
        }
    ]
}